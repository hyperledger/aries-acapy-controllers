@page "/credentials"

@using FaberController.Services
@using FaberController.Shared.Components.ComponentNav
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.ComponentModel.DataAnnotations

@inject FCAgentService AgentService
@inject NavigationManager Navigation

<ComponentNav></ComponentNav>

<div class="content">
    <div class="container">

        <EditForm novalidate autocomplete="off" Model="@_newCredentialModel" OnValidSubmit="@_handleValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <InputSelect class="custom-select custom-select-lg mb-3" @bind-Value="_newCredentialModel.ConnectionId">
                    <option selected disabled value="">Select a Connection</option>
                    @foreach (var Connection in Connections)
                    {
                        <option value="@Connection["connection_id"]">@Connection["their_label"]: @Connection["connection_id"]</option>

                    }
                </InputSelect>
                <div class="invalid-feedback d-block">
                    <ValidationMessage For="@(() => _newCredentialModel.ConnectionId)" />
                </div>
            </div>
            <div class="form-group">
                <InputSelect class="custom-select custom-select-lg mb-3" @bind-Value="_newCredentialModel.SchemaId">
                    <option selected disabled value="">Select a Schema</option>
                    @foreach (var SchemaId in SchemaIds)
                    {
                        <option value="@SchemaId">@SchemaId</option>

                    }
                </InputSelect>
                <div class="invalid-feedback d-block">
                    <ValidationMessage For="@(() => _newCredentialModel.SchemaId)" />
                </div>
            </div>

            <div class="form-group">
                <InputSelect class="custom-select custom-select-lg mb-3" @bind-Value="_newCredentialModel.CredentialDefinitionId">
                    <option selected disabled value="">Select a CredentialDefinition</option>
                    @foreach (var CredentialDefinitionId in CredentialDefinitionIds)
                    {
                        <option value="@CredentialDefinitionId">@CredentialDefinitionId</option>

                    }
                </InputSelect>
                <div class="invalid-feedback d-block">
                    <ValidationMessage For="@(() => _newCredentialModel.CredentialDefinitionId)" />
                </div>
            </div>

            <div class="form-group">
                <label for="credentialAttributesObject">Add credential attributes in JSON array format:</label>
                <InputTextArea class="form-control" id="credentialAttributesObject" cols="30" rows="10"
                               @bind-Value="_newCredentialModel.CredentialAttributesObject"></InputTextArea>
                <div class="invalid-feedback d-block">
                    <ValidationMessage For="@(() => _newCredentialModel.CredentialAttributesObject)" />
                </div>
            </div>
            <button type="submit" class="btn btn-primary btn-lg btn-block">
                Send Credential
            </button>
        </EditForm>
    </div>
</div>

@code {
    private NewCredentialModel _newCredentialModel = new NewCredentialModel();

    public JArray CredentialDefinitionIds = new JArray();
    public JArray SchemaIds = new JArray();
    public JArray Connections = new JArray();

    private static string _defaultCredential = @"{
        'comment': 'string',
        'credential_proposal': {
            '@type': 'did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/issue-credential/1.0/credential-preview',
            'attributes': []
        },
        'schema_issuer_did': '',
        'connection_id': '',
        'schema_version': '',
        'schema_id': '',
        'issuer_did': '',
        'cred_def_id': '',
        'schema_name': ''
    }";

    private async void _handleValidSubmit()
    {
        var credential = JObject.Parse(_defaultCredential);
        var schemaId = _newCredentialModel.SchemaId;
        var credentialDefinitionId = _newCredentialModel.CredentialDefinitionId;

        var schemaArr = schemaId.Split(":");
        credential["schema_issuer_did"] = schemaArr[0];
        credential["schema_version"] = schemaArr[3];
        credential["schema_id"] = schemaId;
        credential["schema_name"] = schemaArr[2];

        var credDefArr = credentialDefinitionId.Split(":");
        credential["issuer_did"] = credDefArr[0];
        credential["cred_def_id"] = credentialDefinitionId;

        credential["connection_id"] = _newCredentialModel.ConnectionId;

        credential["credential_proposal"]["attributes"] = JArray.Parse(_newCredentialModel.CredentialAttributesObject);

        await AgentService.SendCredential(credential.ToString());
        Navigation.NavigateTo("/connections/active");
    }

    protected async override Task OnInitializedAsync()
    {
        CredentialDefinitionIds = await AgentService.GetCredentialDefinitions();
        SchemaIds = await AgentService.GetSchemas();
        Connections = await AgentService.GetConnections();
        Connections = new JArray(Connections
            .Where(Connection => (string)Connection["state"] == "active" || (string)Connection["state"] == "request"));
    }

    public class NewCredentialModel
    {
        private static string _defaultAttributes = @"[
            { 'name': 'name', 'value': 'Molefe Tomase' },
            { 'name': 'age', 'value': '23' },
            { 'name': 'testDate', 'value': '2022-05-10' },
            { 'name': 'testResult', 'value': 'Negative' },
        ]";

        [Required(ErrorMessage = "A Connection ID is required")]
        public string ConnectionId { get; set; }

        [Required(ErrorMessage = "A Credential Schema is required")]
        public string SchemaId { get; set; }

        [Required(ErrorMessage = "A Credential Definition is required")]
        public string CredentialDefinitionId { get; set; }

        [Required(ErrorMessage = "Credential attributes are required")]
        [ValidJson]
        public string CredentialAttributesObject { get; set; } = JArray.Parse(_defaultAttributes).ToString();
    }

    public class ValidJson : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            try
            {
                JsonConvert.DeserializeObject<dynamic>
                    (value.ToString());
            }
            catch (Exception ex)
            {
                return new ValidationResult(String.Format("Invalid object: {0}", ex.Message), new[] { validationContext.MemberName });
            }
            return ValidationResult.Success;
        }
    }

}
